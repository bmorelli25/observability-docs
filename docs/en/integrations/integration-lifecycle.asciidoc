[[integration-lifecycle]]
= Integration lifecycle

. Create a source package
+
All integrations start as a source package.
You'll find most Elastic integrations in the `elastic/integrations` repo,
but a package can live anywhere.

. Publish to the package registry
+
When an integration is ready to be published, bump the version in the manifest file
and publish the package to the Elastic Package Registry (EPR) using `elastic-package`
// the three stages of EPR reflect the maturity of a package
// snapshot
// staging
// production

. Install the package
+
After a package is published in the EPR, it is downloaded as a .zip file from the package-registry by Fleet inside Kibana.
The package is now ready to be installed.
+
Click **add integration** to install the integration and add it to an Elastic Agent policy.
When you install a package, its assets are unpacked and installed into Elasticsearch and Kibana using stack APIs.
In addition, configuration for the package is persisted in Elasticsearch as an Elastic Agent policy.

. Add the policy with the integration to an Elastic Agent
+
Once the policy with an integration is added to an Elastic Agent,
the agent will begin to collect and ship data to the Elastic Stack based on the Elastic integration.
+
Package assets may come into play here. For example, if a package installed ingest pipelines,
those will intercept the data, and transform it before it is indexed.

. Visualize
+
Integrations can ship with custom dashboards and visualizations that are installed with the integration.
Use these for a tailored view at your Observability data.

[discrete]
[[integration-repos]]
== Repositories

// While this repository contains sources for Elastic Integrations, built Elastic Integrations are stored in the Package Storage repository and served up via the Package Registry. The Fleet UI in Kibana connects to the Package Registry and allows users to discover, install, and configure Elastic Packages.

[discrete]
=== Package specification

* Formal spec of what an Elastic package is
* What we use for validation of new or updated packages

Repo: https://github.com/elastic/package-spec

Right now it's on V1. Should we pull some of this content into the documentation?
https://github.com/elastic/package-spec/tree/master/versions/1

[discrete]
=== Package storage

* Backing store for the package registry service
* Whatever you see in this repo is what you can find via the package registry service
* 3 branches: snapshot, staging, production

Repo: https://github.com/elastic/package-storage

[discrete]
=== Package registry

* Source code for the package registry server

Repo: https://github.com/elastic/package-registry

[discrete]
=== Integrations

* Where most _Elastic_ packages are kept

Repo: https://github.com/elastic/integrations
